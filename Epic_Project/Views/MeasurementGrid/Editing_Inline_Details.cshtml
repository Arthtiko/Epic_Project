@model MeasurementSearchModel
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<script src="//cdnjs.cloudflare.com/ajax/libs/jszip/2.4.0/jszip.min.js"></script>

@*<div class="row" style="position: relative;">
    <div style="margin-left: 15px">
        <form class="k-form" asp-controller="MeasurementGrid" asp-action="Editing_Inline_Details" method="post" style="height: 40px; margin-left: 10px; margin-top: 5px;">
            <div class="row">
                <div style="margin-left: 4px">
                    <text class="text-size">Year-Month: </text>
                    <select class="k-select select-size" id="form-select-time" asp-for="YearMonth" onchange="submit()"></select>
                </div>
            </div>
        </form>
    </div>
    <div>
        <a class="k-button button-size" id="showGrid" style="margin-top: 1px;">Show Data</a>
    </div>
</div>*@


@(Html.Kendo().Grid<MeasurementDetailsViewModel>()
      .Name("grid")
      .AutoBind(false)
      .Columns(columns =>
      {
          columns.Bound(m => m.EpicId).Filterable(ftb => ftb.Multi(true).Search(true)).Title("EPIC Id").HtmlAttributes(new { style = "text-align:center; height:45px; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(120).Locked(true);
          columns.Bound(m => m.EpicName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Name").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(175).Locked(true);
          columns.Bound(m => m.ActualOverallEpicCompilation).Format("{0:0.00 \\ '%'}")/*.ClientTemplate("<div class='progress4' data-role='progressbar' style='width: 90%;  background-color: White;'></div>")*/.Title("Overall Epic Completion").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(130).Locked(true);
          columns.Bound(m => m.Module.ModuleName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Module").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(175);
          columns.Bound(m => m.Year).Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(100);
          columns.Bound(m => m.Month).Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(100);
          columns.Bound(m => m.Location).Filterable(ftb => ftb.Multi(true).Search(true)).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(125);
          columns.Bound(m => m.EpicWeight).Title("Weight").ClientFooterTemplate("Total: #=sum#").Filterable(false).Format("{0:0.000000}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
          columns.Bound(m => m.Estimation).ClientFooterTemplate("Total: #=sum#").Filterable(false).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
          columns.Bound(m => m.Team.TeamName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Team").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
          columns.Bound(m => m.IsFirstSellableModule).Filterable(ftb => ftb.Multi(true).Search(true)).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(175);
          columns.Group(g => g.Title("Previous Month").HeaderHtmlAttributes(new { style = "text-align:center; background-color: #FFF2CC" }).Columns(c =>
          {
              c.Bound(m => m.PrevMonthRequirementProgress).Title("Requirement Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).Width(110);
              c.Bound(m => m.PrevMonthDesignProgress).Title("Design Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).Width(90);
              c.Bound(m => m.PrevMonthDevelopmentProgress).Title("Development Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).Width(110);
              c.Bound(m => m.PrevMonthTestProgress).Title("Test Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).Width(90);
              c.Bound(m => m.PrevMonthUatProgress).Title("Uat Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).Width(90);
              c.Bound(m => m.PrevMonthOverallEpicCompilation).ClientTemplate("<div class='progress1' data-role='progressbar' style='width: 100%; background-color: White;' ></div>").Width(130).Filterable(false).Title("Overall Epic Completion").Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" });
              c.Bound(m => m.PrevMonthWeightedOverallProgress).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Weighted Overall Progress").Filterable(false).Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).Width(105);
          }));
          columns.Group(g => g.Title("Current Actual").HeaderHtmlAttributes(new { style = "text-align:center; background-color: #f8cbad" }).Columns(c =>
          {
              c.Bound(m => m.ActualRequirementProgress).Title("Requirement Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(110);
              c.Bound(m => m.ActualDesignProgress).Title("Design Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(90);
              c.Bound(m => m.ActualDevelopmentProgress).Title("Development Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(110);
              c.Bound(m => m.ActualTestProgress).Title("Test Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(90);
              c.Bound(m => m.ActualUatProgress).Title("Uat Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(90);
              c.Bound(m => m.ActualOverallEpicCompilation).Format("{0:0.00 \\'%'}").ClientTemplate("<div class='progress2' data-role='progressbar' style='width: 100%;  background-color: White;'></div>").Title("Overall Epic Completion").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(130);
              c.Bound(m => m.ActualWeightedOverallProgress).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Weighted Overall Progress").Filterable(false).Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).Width(105);
          }));
          columns.Group(g => g.Title("Current Target").HeaderHtmlAttributes(new { style = "text-align:center; background-color: PowderBlue" }).Columns(c =>
          {
              c.Bound(m => m.TargetRequirementProgress).Title("Requirement Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(110);
              c.Bound(m => m.TargetDesignProgress).Title("Design Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(90);
              c.Bound(m => m.TargetDevelopmentProgress).Title("Development Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(110);
              c.Bound(m => m.TargetTestProgress).Title("Test Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(90);
              c.Bound(m => m.TargetUatProgress).Title("Uat Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(90);
              c.Bound(m => m.TargetOverallEpicCompilation).ClientTemplate("<div class='progress3' data-role='progressbar' style='width: 100%; background-color: White;' ></div>").Title("Overall Epic Completion").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(130);
              c.Bound(m => m.TargetWeightedOverallProgress).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Weighted Overall Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).Width(105);
          }));
          columns.Bound(m => m.PreviousMonthCumulativeActualEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Previous Month Cumulative Actual Effort").Format("{0:0.00}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
          columns.Bound(m => m.ActualEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(105);
      })
      .ToolBar(toolbar => toolbar.ClientTemplateId("GridToolbarTemplate"))
      .Groupable()
      .Scrollable()
      .Sortable(sort => sort.SortMode(GridSortMode.MultipleColumn))
      .Filterable()
      .Events(e => e.DataBound("dataBound"))
      .Resizable(resizable => resizable.Columns(true))
      .Reorderable(reorderable => reorderable.Columns(true))
      .HtmlAttributes(new { style = "background-color: Gainsboro;" })
      .Excel(excel => excel.FileName("MeasurementReport " + Model.Year + "-" + Model.Month + ".xlsx").Filterable(true).ProxyURL(Url.Action("Excel_Export_Save", "MeasurementGrid")))
      .DataSource(dataSource => dataSource
      .Ajax()
      .Aggregates(aggregates =>
      {
          aggregates.Add(m => m.EpicWeight).Sum();
          aggregates.Add(m => m.Estimation).Sum();
          aggregates.Add(m => m.PrevMonthWeightedOverallProgress).Sum();
          aggregates.Add(m => m.ActualWeightedOverallProgress).Sum();
          aggregates.Add(m => m.TargetWeightedOverallProgress).Sum();
          aggregates.Add(m => m.PreviousMonthCumulativeActualEffort).Sum();
          aggregates.Add(m => m.ActualEffort).Sum();
      })
      .Events(events => events.Error("error_handler"))
      .Model(model =>
      {
          model.Id(m => m.EpicId);
      })
      .Read(read => read.Action("EditingInLineDetails_Read", "MeasurementGrid", new { Model.EpicId, Model.Year, Model.Month, Model.YearMonth, Model.Location, Model.TeamName, Model.Type }))
                )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function locationFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenu_Locations")"
                }
            },
            optionLabel: "Select Location"
        });
    }


    function resizeGrid() {

        var grid = $("#grid");
        var form = $("#form-id");

        var minimumAcceptableGridHeight = 300;

        var windowHeight = $(window).innerHeight();
        var contentArea = grid.find(".k-grid-content");

        var calculatedHeight = windowHeight - 35 - 150 - 50; // -80; // bunu ekleyince window vertical scroll bar gidiyo
        var finalHeight = (calculatedHeight < minimumAcceptableGridHeight ? minimumAcceptableGridHeight : calculatedHeight);



        contentArea.height(finalHeight);
    //$("#grid").data('kendoGrid')._adjustLockedHorizontalScrollBar();
    }

    function renderTemplate(ActualOverallEpicCompilation) {
        return "<div data-role='progress-bar' data-type='percent' data-min='0' data-max='100' data-bind='value: ActualOverallEpicCompilation'></div>";
    }

    $(window).resize(function () {
        resizeGrid();
    });
    $(window).ready(function () {
        resizeGrid();
    });

    function onRequestEnd() {
        var grid = $("#grid").data("kendoGrid");
        grid.refresh();
    }


    $(document).ready(function () {
        var url = window.location.href.split("/")[3];
        if (url == null || url == "") {
            $.get('MeasurementGrid/selectDates', function (data) {
                console.log(data)
                var i = 0;
                $.each(data, function (index, value) {
                    $('<option>').val(value).text(value).appendTo("#form-select-time");
                    if (value == (@Model.Year + "-" + @Model.Month)) {
                        document.getElementById("form-select-time").selectedIndex = i;
                    }
                    i++;
                })
            })
        }
        else {
            $.get('selectDates', function (data) {
                console.log(data)
                var i = 0;
                $.each(data, function (index, value) {
                    $('<option>').val(value).text(value).appendTo("#form-select-time");
                    if (value == (@Model.Year + "-" + @Model.Month)) {
                        document.getElementById("form-select-time").selectedIndex = i;
                    }
                    i++;
                })
            })
        }
        
    })

    function dataBound() {
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var model = grid.dataItem(this);
            $(this).find(".progress1").kendoProgressBar({
                type: "percent",
                value: model.PrevMonthOverallEpicCompilation
            });
            $(this).find(".progress2").kendoProgressBar({
                type: "percent",
                value: model.ActualOverallEpicCompilation
            });
            $(this).find(".progress3").kendoProgressBar({
                type: "percent",
                value: model.TargetOverallEpicCompilation
            });
        });
    }

    $("#showGrid").click(function () {
        $("#grid").data("kendoGrid").dataSource.read();
    });

</script>


<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div class="dateListContainer">
        <text>Year-Month: </text>
        @(Html.Kendo().DropDownList()
                                      .Name("yearMonths")
                                      .Value(Model.YearMonth)
                                      .Events(e => e.Change("datesOnChange"))
                                      .DataSource(ds =>
                                      {
                                          ds.Read("selectDates", "MeasurementGrid");
                                      })
                                      .ToClientTemplate()
        )
        @(Html.Kendo().Button()
                                      .Name("show-data")
                                      .Content("Show Data")
                                      .Events(e => e.Click("showData"))
                                      .ToClientTemplate()
        )
    </div>
    <div class="toolbar">
        @(Html.Kendo().Button()
                              .Name("excel")
                              .HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-excel" })
                              .Content("Export to Excel")
                              .ToClientTemplate()
        )
    </div>
</script>
<script type="text/javascript">
    function datesOnChange(e) {
        window.location.href = "Editing_Inline_Details?YearMonth=" + this.value();
    }
    function showData() {
        $("#grid").data("kendoGrid").dataSource.read();
    }
    function exportExcel() {
        window.location.href = "#";
    }
</script>

<style>
    .button-size {
        margin-left: 24px;
        margin-top: -5px;
    }
    #grid .k-grid-toolbar {
        padding: .6em 1.3em .6em .4em;
    }

    .dateListContainer {
        margin-left: 24px;
        display: inline-block;
    }

    .toolbar {
        float: right;
    }
</style>