@model MeasurementSearchModel
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@(Html.Kendo().Grid<MeasurementDetailsViewModel>
    ()
    .Name("grid")
    .AutoBind(false)
    .Columns(columns =>
    {
        columns.Bound(m => m.EpicId).Filterable(ftb => ftb.Multi(true).Search(true)).Title("EPIC Id").HtmlAttributes(new { style = "text-align:center; height:45px; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(120).Locked(true);
        columns.Bound(m => m.EpicName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Name").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(175).Locked(true);
        columns.Bound(m => m.ActualOverallEpicCompilation).Format("{0:0.00 \\ '%'}")/*.ClientTemplate("<div class='progress4' data-role='progressbar' style='width: 90%;  background-color: White;'></div>")*/.Title("Overall Epic Completion").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(130).Locked(true);
        columns.Bound(m => m.Module.ModuleName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Module").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(175);
        columns.Bound(m => m.Year).Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(100);
        columns.Bound(m => m.Month).Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(100);
        columns.Bound(m => m.Location).Filterable(ftb => ftb.Multi(true).Search(true)).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(125);
        columns.Bound(m => m.EpicWeight).Title("Weight").ClientFooterTemplate("Total: #=sum#").Filterable(false).Format("{0:0.000000}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
        columns.Bound(m => m.Estimation).ClientFooterTemplate("Total: #=sum#").Filterable(false).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
        columns.Bound(m => m.Team.TeamName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Team").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(135);
        columns.Bound(m => m.IsFirstSellableModule).Title("Delivery").Filterable(ftb => ftb.Multi(true).Search(true)).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(175);
        columns.Bound(m => m.FSMPercentage).Title("FSM(Ph-4) Percentage").Filterable(false).Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(120);
        columns.Group(g => g.Title("Previous Month").HeaderHtmlAttributes(new { style = "text-align:center; background-color: #FFF2CC" }).Columns(c =>
        {
            c.Bound(m => m.PrevMonthRequirementProgress).Title("Requirement Progress").ClientFooterTemplate("#=pmReq()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(110);
            c.Bound(m => m.PrevMonthDesignProgress).Title("Design Progress").ClientFooterTemplate("#=pmDes()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.PrevMonthDevelopmentProgress).Title("Development Progress").ClientFooterTemplate("#=pmDev()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(110);
            c.Bound(m => m.PrevMonthTestProgress).Title("Test Progress").ClientFooterTemplate("#=pmTest()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.PrevMonthUatProgress).Title("Uat Progress").ClientFooterTemplate("#=pmUat()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.PrevMonthOverallEpicCompilation).ClientTemplate("<div class='progress1' data-role='progressbar' style='width: 100%; background-color: White;'></div>").ClientFooterTemplate("Avg: #= kendo.format('{0:p}', average/100)#").Width(130).Filterable(false).Title("Overall Epic Completion").Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
            c.Bound(m => m.PrevMonthWeightedOverallProgress).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Weighted Overall Progress").Filterable(false).Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: Cornsilk;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #FFF2CC;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(105);
        }));
        columns.Group(g => g.Title("Current Actual").HeaderHtmlAttributes(new { style = "text-align:center; background-color: #f8cbad" }).Columns(c =>
        {
            c.Bound(m => m.ActualRequirementProgress).Title("Requirement Progress").ClientFooterTemplate("#=cReq()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(110);
            c.Bound(m => m.ActualDesignProgress).Title("Design Progress").ClientFooterTemplate("#=cDes()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.ActualDevelopmentProgress).Title("Development Progress").ClientFooterTemplate("#=cDev()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(110);
            c.Bound(m => m.ActualTestProgress).Title("Test Progress").ClientFooterTemplate("#=cTest()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.ActualUatProgress).Title("Uat Progress").ClientFooterTemplate("#=cUat()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.ActualOverallEpicCompilation).Format("{0:0.00 \\'%'}").ClientTemplate("<div class='progress2' data-role='progressbar' style='width: 100%;  background-color: White;'></div>").ClientFooterTemplate("Avg: #= kendo.format('{0:p}', average/100)#").Title("Overall Epic Completion").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(130);
            c.Bound(m => m.ActualWeightedOverallProgress).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Weighted Overall Progress").Filterable(false).Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PeachPuff;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: #f8cbad;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(105);
        }));
        columns.Group(g => g.Title("Current Target").HeaderHtmlAttributes(new { style = "text-align:center; background-color: PowderBlue" }).Columns(c =>
        {
            c.Bound(m => m.TargetRequirementProgress).Title("Requirement Progress").ClientFooterTemplate("#=tReq()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(110);
            c.Bound(m => m.TargetDesignProgress).Title("Design Progress").ClientFooterTemplate("#=tDes()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.TargetDevelopmentProgress).Title("Development Progress").ClientFooterTemplate("#=tDev()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(110);
            c.Bound(m => m.TargetTestProgress).Title("Test Progress").ClientFooterTemplate("#=tTest()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.TargetUatProgress).Title("Uat Progress").ClientFooterTemplate("#=tUat()#").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(90);
            c.Bound(m => m.TargetOverallEpicCompilation).ClientTemplate("<div class='progress3' data-role='progressbar' style='width: 100%; background-color: White;'></div>").ClientFooterTemplate("Avg: #= kendo.format('{0:p}', average/100)#").Title("Overall Epic Completion").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(130);
            c.Bound(m => m.TargetWeightedOverallProgress).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Weighted Overall Progress").Format("{0:0.00 \\'%'}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background: PaleTurquoise;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; background-color: PowderBlue;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(105);
        }));
        columns.Bound(m => m.PreviousMonthCumulativeActualEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Title("Previous Month Cumulative Actual Effort").Format("{0:0.00}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(135);
        columns.Bound(m => m.ActualEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center;" }).Width(105);
        columns.Bound(m => m.Variance).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").Filterable(false).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(105);
        columns.Bound(m => m.Description).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(270);
        columns.Bound(m => m.Dependency).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Width(270);
    })
    .ToolBar(toolbar => toolbar.ClientTemplateId("GridToolbarTemplate"))
    .Groupable()
    .Scrollable()
    .Sortable()
    .Filterable(fil => fil.Extra(false).Operators(op => op.ForString(str => str.Clear().Contains("Contains"))))
    .Events(e => e.DataBound("dataBound"))
    .Events(e => e.ExcelExport("excelExport"))
    .Resizable(resizable => resizable.Columns(true))
    .Reorderable(reorderable => reorderable.Columns(true))
    .HtmlAttributes(new { style = "background-color: Gainsboro;" })
    .Excel(excel => excel.FileName("MeasurementReport " + Model.Year + "-" + Model.Month + ".xlsx").Filterable(true).ProxyURL(Url.Action("Excel_Export_Save", "MeasurementGrid")))
    .DataSource(dataSource => dataSource
    .Ajax()
    .Aggregates(aggregates =>
    {
        aggregates.Add(m => m.EpicWeight).Sum();
        aggregates.Add(m => m.Estimation).Sum();
        aggregates.Add(m => m.PrevMonthWeightedOverallProgress).Sum();
        aggregates.Add(m => m.ActualWeightedOverallProgress).Sum();
        aggregates.Add(m => m.TargetWeightedOverallProgress).Sum();
        aggregates.Add(m => m.PreviousMonthCumulativeActualEffort).Sum();
        aggregates.Add(m => m.ActualEffort).Sum();
        aggregates.Add(m => m.Variance).Sum();
        aggregates.Add(m => m.ActualRequirementProgress).Average();
        aggregates.Add(m => m.ActualDesignProgress).Average();
        aggregates.Add(m => m.ActualDevelopmentProgress).Average();
        aggregates.Add(m => m.ActualTestProgress).Average();
        aggregates.Add(m => m.ActualUatProgress).Average();
        aggregates.Add(m => m.ActualOverallEpicCompilation).Average();
        aggregates.Add(m => m.TargetRequirementProgress).Average();
        aggregates.Add(m => m.TargetDesignProgress).Average();
        aggregates.Add(m => m.TargetDevelopmentProgress).Average();
        aggregates.Add(m => m.TargetTestProgress).Average();
        aggregates.Add(m => m.TargetUatProgress).Average();
        aggregates.Add(m => m.TargetOverallEpicCompilation).Average();
        aggregates.Add(m => m.PrevMonthRequirementProgress).Average();
        aggregates.Add(m => m.PrevMonthDesignProgress).Average();
        aggregates.Add(m => m.PrevMonthDevelopmentProgress).Average();
        aggregates.Add(m => m.PrevMonthTestProgress).Average();
        aggregates.Add(m => m.PrevMonthUatProgress).Average();
        aggregates.Add(m => m.PrevMonthOverallEpicCompilation).Average();
    })
    .Events(events => events.Error("error_handler"))
    .Model(model =>
    {
        model.Id(m => m.EpicId);
    })
    .Read(read => read.Action("EditingInLineDetails_Read", "MeasurementGrid").Data("getReadData"))
    )
    )
    <script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
        }

        function excelExport(e) {
            var yearMonth = document.getElementById("yearMonths").value;
            var location = document.getElementById("locations").value;
            var fsm = document.getElementById("isFSM").value;
            var team = document.getElementById("team").value;
            var filename = "Measurement Report " + yearMonth;

            if (location != "All") {
                filename = filename + "/" + location;
            }
            if (fsm != "All") {
                if (fsm == "TRUE") {
                    filename = filename + "/FSM";
                }
                else {
                    filename = filename + "/Not FSM";
                }
            }
            if (team != "All") {
                filename = filename + "/" + team;
            }

            filename = filename + ".xlsx";
            e.workbook.fileName = filename;
        }

    function resizeGrid() {

        var grid = $("#grid");
        var form = $("#form-id");

        var minimumAcceptableGridHeight = 300;

        var windowHeight = $(window).innerHeight();
        var contentArea = grid.find(".k-grid-content");

        var calculatedHeight = windowHeight - 235;
        var finalHeight = (calculatedHeight < minimumAcceptableGridHeight ? minimumAcceptableGridHeight : calculatedHeight);
        contentArea.height(finalHeight);
    }

    $(window).resize(function () {
        resizeGrid();
    });
    $(window).ready(function () {
        resizeGrid();
    });

    function onRequestEnd() {
        var grid = $("#grid").data("kendoGrid");
        grid.refresh();
    }

    function dataBound(e) {
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var model = grid.dataItem(this);
            $(this).find(".progress1").kendoProgressBar({
                type: "percent",
                value: model.PrevMonthOverallEpicCompilation
            });
            $(this).find(".progress2").kendoProgressBar({
                type: "percent",
                value: model.ActualOverallEpicCompilation
            });
            $(this).find(".progress3").kendoProgressBar({
                type: "percent",
                value: model.TargetOverallEpicCompilation
            });
        });

        var columns = e.sender.columns;
        var columnIndex = 32;
        
        var rows = e.sender.tbody.children();
        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var dataItem = e.sender.dataItem(row);

            var units = dataItem.get("Variance");
            
            var cell = row.children().eq(columnIndex);
            cell.addClass(getUnitsInStockClass(units));
        }
    }

    function getUnitsInStockClass(units) {
        if (units > 0.1) {
            return "critical";
        } else if (units < 0) {
            return "ok";
        } else {
            return "warning";
        }
    }
    
    $("#showGrid").click(function () {
        $("#grid").data("kendoGrid").dataSource.filter({});
        $("#grid").data("kendoGrid").dataSource.read();
    });


    </script>


    <script id="GridToolbarTemplate" type="text/x-kendo-template">
        <div class="dateListContainer">
            <text>Date: </text>
            @(Html.Kendo().DropDownList()
               .Name("yearMonths")
               .Value(Model.YearMonth)
               .DataSource(ds =>
               {
                   ds.Read("selectDates", "MeasurementGrid");
               })
               .ToClientTemplate()
            )
            <text class="filter-gap">Location: </text>
            @(Html.Kendo().DropDownList()
               .Name("locations")
               .Events(e => e.Change("locationChange"))
               .DataSource(ds =>
               {
                   ds.Read("selectLocations", "MeasurementGrid");
               })
               .ToClientTemplate()
            )
            <text class="filter-gap">Delivery: </text>
            @(Html.Kendo().DropDownList()
               .Name("isFSM")
               .DataSource(ds =>
               {
                   ds.Read("selectFSM", "MeasurementGrid");
               })
               .ToClientTemplate()
            )
            <text class="filter-gap">Team: </text>
            @(Html.Kendo().DropDownList()
               .Name("team")
               .DataSource(ds =>
               {
                   ds.Read(read => read.Action("selectTeams", "MeasurementGrid").Data("getTeamsData"));
               })
               .ToClientTemplate()
            )
            @(Html.Kendo().Button()
               .Name("show-data")
               .Content("Show Data")
               .Events(e => e.Click("showData"))
               .ToClientTemplate()
            )
        </div>
        <div class="toolbar">
            @(Html.Kendo().Button()
               .Name("excel")
               .HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-excel" })
               .Content("Export to Excel")
               .ToClientTemplate()
            )
        </div>
    </script>
    <script type="text/javascript">
        function getReadData() {
            var yearMonth = document.getElementById("yearMonths").value;
            var year = yearMonth.split("-")[0];
            var month = yearMonth.split("-")[1];

            var location = document.getElementById("locations").value;

            var FSM = document.getElementById("isFSM").value;

            var team = document.getElementById("team").value;

            return {
                year: year,
                month: month,
                location: location,
                isFSM: FSM,
                team: team
            };
        }
        function getTeamsData() {
            return {
                location: document.getElementById("locations").value
            };
        }
        function locationChange() {
            $("#team").data("kendoDropDownList").dataSource.read();
            $("#team").data("kendoDropDownList").value("All")
        }
        function showData() {
            var yearMonth = document.getElementById("yearMonths").value;
            var year = yearMonth.split("-")[0];
            var month = yearMonth.split("-")[1];
            $.ajax({
                contentType: 'application/json',
                data: {
                    "year": year,
                    "month": month
                },
                type: "GET",
                async: false,
                dataType: "text",
                url: "/MeasurementGrid/IsVarianceShowed",
                success: function (result) {
                    console.log(result)
                    if (result == "true") {
                        $("#grid").data("kendoGrid").showColumn(17);
                    }
                    else {
                        $("#grid").data("kendoGrid").hideColumn(17);
                    }
                },
                error: function (error) {
                    console.log("error");
                    console.log(error);
                }
            });
            $("form.k-filter-menu button[type='reset']").slice(0, 32).trigger("click");
            $("#grid").data("kendoGrid").dataSource.read();
        }
        function getLocation() {
            return document.getElementById("locations").value;
        }
        function exportExcel() {
            window.location.href = "#";
        }
    </script>

    <style>
        .button-size {
            margin-left: 24px;
            margin-top: -5px;
        }

        #grid .k-grid-toolbar {
            padding: .6em 1.3em .6em .4em;
        }

        .dateListContainer {
            margin-left: 12px;
            display: inline-block;
        }

        .filter-gap {
            margin-left: 12px;
        }

        .toolbar {
            float: right;
        }
        .critical {
            background-color: #f44e4e;
        }

        .warning {
            background-color: #ffc100;
        }

        .ok {
            background-color: #61df00;
        }
    </style>


<script type="text/javascript">
    function pmReq() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.PrevMonthRequirementProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function pmDes() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.PrevMonthDesignProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function pmDev() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.PrevMonthDevelopmentProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function pmTest() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.PrevMonthTestProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function pmUat() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.PrevMonthUatProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function pmProgress() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.PrevMonthOverallEpicCompilation;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
</script>
<script type="text/javascript">
    function cReq() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.ActualRequirementProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function cDes() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.ActualDesignProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function cDev() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.ActualDevelopmentProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function cTest() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.ActualTestProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function cUat() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.ActualUatProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function cProgress() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.ActualOverallEpicCompilation;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
</script>
<script type="text/javascript">
    function tReq() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.TargetRequirementProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function tDes() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.TargetDesignProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function tDev() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.TargetDevelopmentProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function tTest() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.TargetTestProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function tUat() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.TargetUatProgress;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
    function tProgress() {
        var data = $("#grid").data("kendoGrid");
        var item, total = 0, weight = 0;
        for (var i = 0; i < data.dataSource._data.length; i++) {
            item = data.dataSource._data[i];
            weight = weight + item.EpicWeight;
            total = total + item.EpicWeight * item.TargetOverallEpicCompilation;
        }
        var progress = (total / weight).toFixed(2);
        if (progress > 100) {
            var num = 100;
            progress = num.toFixed(2);
        }
        total = "Avg: " + progress + " %";
        return total;
    }
</script>