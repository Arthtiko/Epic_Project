@(Html.Kendo().Grid<MeasurementLog>()
       .Name("grid")
       .AutoBind(false)
       .Columns(columns =>
       {
           columns.Bound(e => e.EpicId).Filterable(ftb => ftb.Multi(true).Search(true)).Title("EPIC Id").Width(120).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Locked(true);
           columns.Bound(e => e.EpicName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Name").Width(270).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Locked(true);
           columns.Bound(e => e.Module).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Module").Width(240).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.Year).Width(90).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.Month).Width(90).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.Type).Filterable(ftb => ftb.Multi(true).Search(true)).Width(105).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.Team).Filterable(ftb => ftb.Multi(true).Search(true)).Width(105).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.RequirementProgress).Filterable(false).Format("{0:0.00 \\'%'}").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.DesignProgress).Width(135).Filterable(false).Format("{0:0.00 \\'%'}").HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.DevelopmentProgress).Filterable(false).Format("{0:0.00 \\'%'}").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.TestProgress).Filterable(false).Format("{0:0.00 \\'%'}").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.UatProgress).Filterable(false).Format("{0:0.00 \\'%'}").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.PreviousMonthCumulativeActualEffort).Filterable(false).Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.ActualEffort).Filterable(false).Format("{0:0.00}").Width(120).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.UserName).Filterable(ftb => ftb.Multi(true).Search(true)).Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.Time).Filterable(false).Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
           columns.Bound(e => e.UserIp).Filterable(false).Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
       })
       .ToolBar(toolbar => toolbar.ClientTemplateId("GridToolbarTemplate"))
       .Groupable()
       .Scrollable()
       .Sortable()
       .Filterable()
       .Excel(excel => excel.FileName("MeasurementLog " + DateTime.Now.Year + "-" + DateTime.Now.Month + " " + DateTime.Now.Hour + ":" + DateTime.Now.Minute + ".xlsx").Filterable(true).ProxyURL(Url.Action("Excel_Export_Save", "Log")))
       .Resizable(resizable => resizable.Columns(true))
       .Reorderable(reorderable => reorderable.Columns(true))
       .HtmlAttributes(new { style = "background-color: Gainsboro" })
       .DataSource(dataSource => dataSource
           .Ajax()
           .Events(events => events.Error("error_handler"))
           .Model(model =>
           {
               model.Id(e => e.EpicId);
           })
           .Read(read => read.Action("MeasurementLog_Read", "Log").Data("getReadData"))
       )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function resizeGrid() {
        var header = $("#header-content");
        var grid = $("#grid");
        var minimumAcceptableGridHeight = 300;
        var windowHeight = $(window).innerHeight();
        var contentArea = grid.find(".k-grid-content");

        var calculatedHeight = windowHeight - 165;
        var finalHeight = (calculatedHeight < minimumAcceptableGridHeight ? minimumAcceptableGridHeight : calculatedHeight);
        contentArea.height(finalHeight);
    }
    $(window).resize(function () {
        resizeGrid();
    });
    $(window).ready(function () {
        resizeGrid();
    });
</script>
<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div class="dateListContainer">
        <text>Epic Id: </text>
        @(Html.Kendo().DropDownList()
                   .Name("IDs")
                   .DataSource(ds =>
                   {
                       ds.Read("selectIDs", "Log");
                   })
                   .ToClientTemplate()
        )
        <text class="filter-gap">Date: </text>
        @(Html.Kendo().DropDownList()
                   .Name("yearMonths")
                   .DataSource(ds =>
                   {
                       ds.Read("selectDates", "Log");
                   })
                   .ToClientTemplate()
        )
        <text class="filter-gap">Type: </text>
        @(Html.Kendo().DropDownList()
                   .Name("types")
                   .DataSource(ds =>
                   {
                       ds.Read("selectTypes", "Log");
                   })
                   .ToClientTemplate()
        )
        <text class="filter-gap">User: </text>
        @(Html.Kendo().DropDownList()
                   .Name("users")
                   .DataSource(ds =>
                   {
                       ds.Read("selectUsers", "Log");
                   })
                   .ToClientTemplate()
        )
        @(Html.Kendo().Button()
                   .Name("show-data")
                   .Content("Show Data")
                   .Events(e => e.Click("showData"))
                   .ToClientTemplate()
        )
    </div>
    <div class="toolbar">
        @(Html.Kendo().Button()
                   .Name("export")
                   .HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-excel" })
                   .Content("Export to Excel")
                   .ToClientTemplate()
        )
    </div>
</script>
<script type="text/javascript">
    function getReadData() {
        var yearMonth = document.getElementById("yearMonths").value;
        var year = yearMonth.split("-")[0];
        var month = yearMonth.split("-")[1];

        var type = document.getElementById("types").value;

        var user = document.getElementById("users").value;

        var epicId = document.getElementById("IDs").value;

        return {
            epicId: epicId,
            year: year,
            month: month,
            type: type,
            user: user
        };
    }
    function showData() {
        $("form.k-filter-menu button[type='reset']").slice(0, 32).trigger("click");
        $("#grid").data("kendoGrid").dataSource.read();
    }
    $("#export").click(function (e) {
        var grid = $("#grid").data("kendoGrid");
        grid.saveAsExcel();
    });
</script>

<style>
    .k-grid tbody tr {
        height: 40px;
    }
    .dateListContainer {
        margin-left: 12px;
        display: inline-block;
    }
    .toolbar {
        float: right;
    }

    .filter-gap {
        margin-left: 12px;
    }
    .row-style-default {
        text-align: center;
        height: auto;
        white-space: normal;
    }
</style>