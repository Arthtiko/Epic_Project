@model ImportSearchModel

<div class="row" style="position: relative;">
    <div style="margin-left: 15px">
        <form class="k-form" asp-controller="Import" asp-action="Index" method="post" style="height: 40px; margin-left: 10px; margin-top: 10px;">
            <div class="row" style="margin-top: -5px;">
                <div style="margin-left: 4px">
                    <text class="text-size">Import Mode: </text>
                    <select class="k-select select-size" asp-for="Mode" onchange="submit()">
                        <option value="1">Progress Only</option>
                        <option value="2">Effort Only</option>
                        <option value="3">Progress and Effort</option>
                    </select>
                </div>
            </div>
        </form>
    </div>
    @if (Context.User.IsInRole("Project Manager") || Context.User.IsInRole("Program Manager") || Context.User.IsInRole("Admin"))
    {
        <div style="position: absolute; right: 0; margin-right: 40px">
            <a class="k-button button-size-month" onclick="importOnClick()">Import</a>
        </div>
    }
</div>


@(Html.Kendo().Spreadsheet()
            .Name("spreadsheet")
            .HtmlAttributes(new { style = "width:100%; height:910px;" })
            .Toolbar(t => t.Data(false).Home(false).Insert(false))
            .Excel(excel => excel
                .ProxyURL(Url.Action("Index_Save", "Import"))
            )
            .Pdf(pdf => pdf
                .ProxyURL(Url.Action("Index_Save", "Spreadsheet"))
            )
            .Sheets(sheets =>
            {
                if (Model.Mode == 1)
                {
                    sheets.Add()
                    .Name("Measurement Import")
                    .MergedCells("A1:I1")
                    .Columns(columns =>
                    {
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(25);
                        columns.Add().Width(600);
                    })
                    .Rows(rows =>
                    {
                        rows.Add().Height(130).Cells(cells =>
                        {
                            cells.Add()
                                .Value("Measurement Import")
                                .FontSize(32)
                                .Background("rgb(96,181,255)")
                                .TextAlign(SpreadsheetTextAlign.Center).VerticalAlign(SpreadsheetVerticalAlign.Center)
                                .Color("white");
                            cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add();
                            cells.Add()
                                .Value("Info:\n" +
                                "Epic Id: As Integer,\n" +
                                "Year: As Integer,\n" +
                                "Month: As Integer,\n" +
                                "Type: 1 for Target, 2 for Actual, \n" +
                                "Progresses: 100.00 for 100%, 0.00 for 0%")
                                .FontSize(16).Bold(true)
                                .Background("rgb(96,181,255)")
                                .TextAlign(SpreadsheetTextAlign.Center)
                                .Color("white");
                        });
                        rows.Add().Height(25).Cells(cells =>
                        {
                            cells.Add()
                                .Value("Epic ID")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Year")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Month")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Type")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Requirement Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Design Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Development Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Test Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Uat Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                        });
                    });
                }
                else if (Model.Mode == 2)
                {
                    sheets.Add()
                    .Name("Measurement Import")
                    .MergedCells("A1:E1")
                    .Columns(columns =>
                    {
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(120);
                        columns.Add().Width(25);
                        columns.Add().Width(600);
                    })
                    .Rows(rows =>
                    {
                        rows.Add().Height(130).Cells(cells =>
                        {
                            cells.Add()
                                .Value("Measurement Import")
                                .FontSize(32)
                                .Background("rgb(96,181,255)")
                                .TextAlign(SpreadsheetTextAlign.Center).VerticalAlign(SpreadsheetVerticalAlign.Center)
                                .Color("white");
                            cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add();
                            cells.Add()
                                .Value("Info:\n" +
                                "Epic Id: As Integer,\n" +
                                "Year: As Integer,\n" +
                                "Month: As Integer,\n" +
                                "Type: 1 for Target, 2 for Actual, \n" +
                                "Actual Effort: As Float")
                                .FontSize(16).Bold(true)
                                .Background("rgb(96,181,255)")
                                .TextAlign(SpreadsheetTextAlign.Center)
                                .Color("white");
                        });
                        rows.Add().Height(25).Cells(cells =>
                        {
                            cells.Add()
                                .Value("Epic ID")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Year")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Month")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Type")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Actual Effort")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                        });
                    });
                }
                else if(Model.Mode == 3)
                {
                    sheets.Add()
                    .Name("Measurement Import")
                    .MergedCells("A1:J1")
                    .Columns(columns =>
                    {
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(80);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(120);
                        columns.Add().Width(25);
                        columns.Add().Width(600);
                    })
                    .Rows(rows =>
                    {
                        rows.Add().Height(130).Cells(cells =>
                        {
                            cells.Add()
                                .Value("Measurement Import")
                                .FontSize(32)
                                .Background("rgb(96,181,255)")
                                .TextAlign(SpreadsheetTextAlign.Center).VerticalAlign(SpreadsheetVerticalAlign.Center)
                                .Color("white");
                            cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add(); cells.Add();
                            cells.Add()
                                .Value("Info:\n" +
                                "Epic Id: As Integer,\n" +
                                "Year: As Integer,\n" +
                                "Month: As Integer,\n" +
                                "Type: 1 for Target, 2 for Actual, \n" +
                                "Progresses: 100.00 for 100%, 0.00 for 0%, \n" +
                                "Actual Effort: As Float")
                                .FontSize(16).Bold(true)
                                .Background("rgb(96,181,255)")
                                .TextAlign(SpreadsheetTextAlign.Center)
                                .Color("white");
                        });
                        rows.Add().Height(25).Cells(cells =>
                        {
                            cells.Add()
                                .Value("Epic ID")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Year")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Month")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Type")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Requirement Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Design Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Development Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Test Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Uat Progress")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                            cells.Add()
                                .Value("Actual Effort")
                                .Background("rgb(167,214,255)")
                                .Color("rgb(0,62,117)")
                                .TextAlign(SpreadsheetTextAlign.Center);
                        });
                    });
                }
            })
)
@(Html.Kendo().Dialog()
        .Name("dialog")
        .Title("Import Report")
        .Visible(false)
        //.Width(500)
        .MaxHeight(750)
        .Modal(true)
    )

<script>
    var zIndex = 25;
    $(".k-window").each(function (i, elem) {
        $(elem).css("z-index", ++zIndex);
    });

    function changeContent(data) {
        $("#dialog").data("kendoDialog").content("<div>" + data + "</div>");
    }

    function showDialog() {
        $('#dialog').data("kendoDialog").open();
    }

    function importOnClick() {
       
        var spreadsheet = $("#spreadsheet").data("kendoSpreadsheet");
        var sheet = spreadsheet.sheetByIndex(0);
        var data = sheet.toJSON();
        var obj;
        var indexes = [];
        var failedEpics = [];
        var failedYears = [];
        var failedMonths = [];
        var failedTypes = [];
        var issues = [];
        var failedEpicCount = 0;

        var epicId = 0; var year = 0; var month = 0; var type = 0; var req = 0; var des = 0; var dev = 0; var test = 0; var uat = 0; var effort = 0;        

        var totalRowsCount = data.rows.length;

        for (let i = 2; i < totalRowsCount; i++) {
            obj = data.rows[i].cells;

            console.log(obj);

            if (obj[0].value != null && obj[0].value != undefined) {
                if (@Model.Mode == 1) {
                epicId = obj[0].value;
                year = obj[1].value;
                month = obj[2].value;
                type = obj[3].value;
                req = obj[4].value;
                des = obj[5].value;
                dev = obj[6].value;
                test = obj[7].value;
                uat = obj[8].value;
            }
            else if (@Model.Mode == 2) {
                epicId = obj[0].value;
                year = obj[1].value;
                month = obj[2].value;
                type = obj[3].value;
                effort = obj[4].value;
            }
            else if (@Model.Mode == 3) {
                epicId = obj[0].value;
                year = obj[1].value;
                month = obj[2].value;
                type = obj[3].value;
                req = obj[4].value;
                des = obj[5].value;
                dev = obj[6].value;
                test = obj[7].value;
                uat = obj[8].value;
                effort = obj[9].value;
            }
            
            $.ajax({
                contentType: 'application/json',
                data: {
                    "epicId": epicId,
                    "year": year,
                    "month": month,
                    "type": type,
                    "req": req,
                    "des": des,
                    "dev": dev,
                    "test": test,
                    "uat": uat,
                    "effort": effort,
                    "mode": @Model.Mode,
                    "lineCount": totalRowsCount
                },
                type: "GET",
                async: false,
                dataType: "text",
                url: "/Import/ImportMeasurement",
                success: function (result) {
                    console.log("result");
                    if (result != "Success") {
                        indexes[failedEpicCount] = i;
                        failedEpics[failedEpicCount] = epicId;
                        failedYears[failedEpicCount] = year;
                        failedMonths[failedEpicCount] = month;
                        failedTypes[failedEpicCount] = type;
                        issues[failedEpicCount] = result;
                        failedEpicCount++;
                    }
                },
                error: function (error) {
                    console.log("error");
                }
            });
            }
        }

        var content = "";


        if (failedEpicCount > 0) {
            content = content + "<table id='issues'>";
            $("#dialog").data("kendoDialog").title("Failed Requests");
            if (@Model.Mode == 1) {
                content = content + "<tr><td>EpicId</td><td>Year</td><td>Month</td><td>Type</td><td>Req. Prog.</td><td>Des. Prog.</td><td>Dev. Prog.</td><td>Test Prog.</td><td>Uat Prog.</td><td>Issues</td></tr>";
                for (let i = 0; i < failedEpicCount; i++) {
                    obj = data.rows[indexes[i]].cells;
                    content = content + "<tr>" +
                        "<td>" + obj[0].value + "</td>" +
                        "<td>" + obj[1].value + "</td>" +
                        "<td>" + obj[2].value + "</td>" +
                        "<td>" + obj[3].value + "</td>" +
                        "<td>" + obj[4].value + "</td>" +
                        "<td>" + obj[5].value + "</td>" +
                        "<td>" + obj[6].value + "</td>" +
                        "<td>" + obj[7].value + "</td>" +
                        "<td>" + obj[8].value + "</td>" +
                        "<td>" + issues[i] + "</td>" +
                        "</tr>";
                }
            }
            if (@Model.Mode == 2) {
                content = content + "<tr><td>EpicId</td><td>Year</td><td>Month</td><td>Type</td><td>Actual Effort</td><td>Issues</td></tr>";
                for (let i = 0; i < failedEpicCount; i++) {
                    obj = data.rows[indexes[i]].cells;
                    content = content + "<tr>" +
                        "<td>" + obj[0].value + "</td>" +
                        "<td>" + obj[1].value + "</td>" +
                        "<td>" + obj[2].value + "</td>" +
                        "<td>" + obj[3].value + "</td>" +
                        "<td>" + obj[4].value + "</td>" +
                        "<td>" + issues[i] + "</td>" +
                        "</tr>";
                }
            }
            if (@Model.Mode == 3) {
                content = content + "<tr><td>EpicId</td><td>Year</td><td>Month</td><td>Type</td><td>Req. Prog.</td><td>Des. Prog.</td><td>Dev. Prog.</td><td>Test Prog.</td><td>Uat Prog.</td><td>Actual Effort</td><td>Issues</td></tr>";
                for (let i = 0; i < failedEpicCount; i++) {
                    obj = data.rows[indexes[i]].cells;
                    content = content + "<tr>" +
                        "<td>" + obj[0].value + "</td>" +
                        "<td>" + obj[1].value + "</td>" +
                        "<td>" + obj[2].value + "</td>" +
                        "<td>" + obj[3].value + "</td>" +
                        "<td>" + obj[4].value + "</td>" +
                        "<td>" + obj[5].value + "</td>" +
                        "<td>" + obj[6].value + "</td>" +
                        "<td>" + obj[7].value + "</td>" +
                        "<td>" + obj[8].value + "</td>" +
                        "<td>" + obj[9].value + "</td>" +
                        "<td>" + issues[i] + "</td>" +
                        "</tr>";
                }
            }
            content = content + "</table>";
        }
        else {
            $("#dialog").data("kendoDialog").title("Import Report");
            content = "<pre>All import requests sent successfully.</pre>";
        }
        
        changeContent(content);
        showDialog();
    }
</script>

<style>
    .k-tabstrip-wrapper {
        display: none;
    }
    #issues {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    #issues td, #issues th {
        border: 1px solid #ddd;
        padding: 8px;
    }

    #issues tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    #issues tr:hover {
        background-color: #ddd;
    }

    #issues th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: left;
        background-color: #4CAF50;
        color: white;
    }
</style>