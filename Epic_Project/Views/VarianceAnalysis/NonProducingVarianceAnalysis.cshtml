@(Html.Kendo().Grid<NonProgressProducingVarianceAnalysis>()
                    .Name("grid")
                    .Columns(columns =>
                    {
                        columns.Bound(v => v.Team.TeamName).ClientFooterTemplate("Grand Total").Filterable(ftb => ftb.Multi(true).Search(true)).Title("Team").Width(135).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Locked(true);
                        columns.Bound(v => v.Year).Filterable(false).Title("Year").Width(90).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.Month).Filterable(false).Title("Month").Width(90).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Group(g => g.Title("Resource Count").HeaderHtmlAttributes(new { style = "text-align:center; padding: .786em .6em .786em 1.286em;" }).Columns(c =>
                        {
                            c.Bound(v => v.ResourceCount).ClientFooterTemplate("#=sum#").Filterable(false).Title("Progress Producing").Width(150).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; padding: .786em .6em .786em 1.286em;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                            c.Bound(v => v.NonProgressProducingResourceCount).ClientFooterTemplate("#=sum#").Filterable(false).Title("Non-Progress Producing").Width(150).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; padding: .786em .6em .786em 1.286em;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                            c.Bound(v => v.TotalResourceCount).ClientFooterTemplate("#=sum#").Filterable(false).Title("Total").Width(150).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal; padding: .786em .6em .786em 1.286em;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        }));
                        columns.Bound(v => v.PlannedManday).ClientFooterTemplate("#=sum#").Filterable(false).Title("Planned ManDay").Width(150).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.DayOff).ClientFooterTemplate("#=sum#").Filterable(false).Title("Planned Day Off").Width(135).HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.PlannedConsumedMandayBudget).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Planned Consumed ManDay Budget").Width(175).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.ThresholdIncrementProgress).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Threshold Increment Progress").Width(175).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.PreviousMonthOverallProgress).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Previous Month Progress").Width(175).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.TargetProgress).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Target Progress").Width(120).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.IncrementProgress).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Increment Progress").Width(135).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.Difference).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Difference").Width(135).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Bound(v => v.Variance).ClientFooterTemplate("#= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Planned Variance").Width(135).Format("{0:0.00}").HtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).FooterHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                        columns.Command(command => { command.Edit(); }).Width(125);
                    })
                    .ToolBar(toolbar => toolbar.ClientTemplateId("GridToolbarTemplate"))
                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                    .Groupable()
                    .Scrollable()
                    .Sortable()
                    .Filterable()
                    .Excel(excel => excel.Filterable(true).ProxyURL(Url.Action("Excel_Export_Save", "VarianceAnalysis")))
                    .Resizable(resizable => resizable.Columns(true))
                    .Reorderable(reorderable => reorderable.Columns(true))
                    .HtmlAttributes(new { style = "background-color: Gainsboro" })
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Aggregates(aggregates =>
                        {
                            aggregates.Add(v => v.Team.TeamName);
                            aggregates.Add(v => v.ResourceCount).Sum();
                            aggregates.Add(v => v.TotalResourceCount).Sum();
                            aggregates.Add(v => v.NonProgressProducingResourceCount).Sum();
                            aggregates.Add(v => v.PlannedManday).Sum();
                            aggregates.Add(v => v.DayOff).Sum();
                            aggregates.Add(v => v.PlannedConsumedMandayBudget).Sum();
                            aggregates.Add(v => v.PreviousMonthOverallProgress).Sum();
                            aggregates.Add(v => v.TargetProgress).Sum();
                            aggregates.Add(v => v.IncrementProgress).Sum();
                            aggregates.Add(v => v.Variance).Sum();
                        })
                        .Events(events => events.Error("error_handler"))
                        .Model(model =>
                        {
                            model.Field(v => v.Team.TeamName).Editable(false);
                            model.Field(v => v.Year).Editable(false);
                            model.Field(v => v.Month).Editable(false);
                            model.Field(v => v.ResourceCount).Editable(false);
                            model.Field(v => v.TotalResourceCount).Editable(false);
                            model.Field(v => v.PlannedManday).Editable(false);
                            model.Field(v => v.PlannedConsumedMandayBudget).Editable(false);
                            model.Field(v => v.PreviousMonthOverallProgress).Editable(false);
                            model.Field(v => v.IncrementProgress).Editable(false);
                            model.Field(v => v.Variance).Editable(false);
                        })
                        .Read(read => read.Action("NonProducingVarianceAnalysis_Read", "VarianceAnalysis").Data("getReadData"))
                        .Update(update => update.Action("NonProducingVarianceAnalysis_Update", "VarianceAnalysis"))
                    )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function resizeGrid() {
        //Define Elements Needed
        var header = $("#header-content");
        var grid = $("#grid");

        var minimumAcceptableGridHeight = 300;

        var windowHeight = $(window).innerHeight();
        //var headerHeight = $(window).headerHeight();
        var contentArea = grid.find(".k-grid-content");

        var calculatedHeight = windowHeight - 185 - 20 - 100; // - headerHeight;       header is empty but this calculation makes grid small
        calculatedHeight += 75;         // create new record butonu eklenirse burayı commentle
        var finalHeight = (calculatedHeight < minimumAcceptableGridHeight ? minimumAcceptableGridHeight : calculatedHeight);

        contentArea.height(finalHeight);
    }
    $(window).resize(function () {
        resizeGrid();
    });
    $(window).ready(function () {
        resizeGrid();
    });
</script>

<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div class="dateListContainer">
        <text>Date: </text>
        @(Html.Kendo().DropDownList()
                           .Name("yearMonths")
                           .DataSource(ds =>
                           {
                               ds.Read("selectDates", "VarianceAnalysis");
                           })
                           .ToClientTemplate()
        )
        @(Html.Kendo().Button()
                           .Name("show-data")
                           .Content("Show Data")
                           .Events(e => e.Click("showData"))
                           .ToClientTemplate()
        )
    </div>
    <div class="toolbar">
        @(Html.Kendo().Button()
                           .Name("excel")
                           .HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-excel" })
                           .Content("Export to Excel")
                           .ToClientTemplate()
        )
    </div>
</script>
<script type="text/javascript">
    function getReadData() {
        var yearMonth = document.getElementById("yearMonths").value;
        var year = yearMonth.split("-")[0];
        var month = yearMonth.split("-")[1];

        return {
            teamId: 0,
            year: year,
            month: month
        };
    }

    function showData() {
        $("form.k-filter-menu button[type='reset']").slice(0, 32).trigger("click");
        $("#grid").data("kendoGrid").dataSource.read();
    }

    function exportExcel() {
        window.location.href = "#";
    }
</script>
<style>
    .toolbar {
        float: right;
    }

    .dateListContainer {
        margin-left: 12px;
        display: inline-block;
    }

    .filter-gap {
        margin-left: 12px;
    }
</style>