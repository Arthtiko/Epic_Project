@model ModuleModel

@(Html.Kendo().Grid<Module>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(m => m.ModuleName).Width(540).HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; padding: .786em .6em .786em 1.286em; text-align:center;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.EpicCount).Width(120).ClientFooterTemplate("Total: #=sum#").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; padding: .786em .6em .786em 1.286em; text-align:center;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.TotalEstimation).Width(180).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; padding: .786em .6em .786em 1.286em; text-align:center;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.Weight).Width(160).Title("Total Weight").ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; padding: .786em .6em .786em 1.286em; text-align:center;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.ActualEffort).Title("Total Effort").Width(150).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center; padding: .786em .6em .786em 1.286em;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.Variance).Width(150).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Format("{0:0.00}").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center; padding: .786em .6em .786em 1.286em;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.WeightedOverallProgress).Width(180).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)# %").Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center; padding: .786em .6em .786em 1.286em;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
          columns.Bound(m => m.Progress).Format("{0:0.00 \\'%'}").ClientTemplate("<div class='progress1' data-role='progressbar' style='width: 100%; background-color: White;' ></div>").Format("{0:0.00 \\'%'}").HtmlAttributes(new { style = "height:auto; white-space:normal; text-align:center;" }).HeaderHtmlAttributes(new { style = "height:auto; white-space:normal; padding: .786em .6em .786em 1.286em; text-align:center;" }).FooterHtmlAttributes(new { style = "text-align:center;" });
      })
      .Scrollable()
      .Sortable()
      .Groupable()
      .Resizable(r => r.Columns(true))
      .Events(e => e.DataBound("dataBound"))
      .HtmlAttributes(new { style = "background-color: Gainsboro;" })
      .DataSource(dataSource => dataSource
          .Ajax()
          .Events(events => { events.Error("error_handler"); })
          .Model(model =>
          {
              model.Id(m => m.ModuleId);
              model.Field(m => m.ModuleId).Editable(false);
          })
          .Aggregates(aggregates =>
          {
              aggregates.Add(m => m.EpicCount).Sum();
              aggregates.Add(m => m.TotalEstimation).Sum();
              aggregates.Add(m => m.Weight).Sum();
              aggregates.Add(m => m.ActualEffort).Sum();
              aggregates.Add(m => m.WeightedOverallProgress).Sum();
              aggregates.Add(m => m.Variance).Sum();
          })
          .Read(read => read.Action("EditingInLine_Read", "Module"))
      )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function resizeGrid() {
        //Define Elements Needed
        var header = $("#header-content");
        var grid = $("#grid");

        var minimumAcceptableGridHeight = 300;
        var windowHeight = $(window).innerHeight();
        var contentArea = grid.find(".k-grid-content");

        var calculatedHeight = windowHeight - 180 - 60; // - headerHeight;       header is empty but this calculation makes grid small
        calculatedHeight = calculatedHeight + 80;
        var finalHeight = (calculatedHeight < minimumAcceptableGridHeight ? minimumAcceptableGridHeight : calculatedHeight);

        contentArea.height(finalHeight);
    }
    $(window).resize(function () {
        resizeGrid();
    });
    $(window).ready(function () {
        resizeGrid();
    });

    function dataBound() {
        var grid = this;
        grid.tbody.find("tr[role='row']").each(function () {
            var model = grid.dataItem(this);
            $(this).find(".progress1").kendoProgressBar({
                type: "percent",
                value: model.Progress
            });
        });
    }
</script>
<style>
    .k-grid tbody tr {
        height: 40px;
    }
</style>