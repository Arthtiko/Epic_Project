@(Html.Kendo().Grid<EpicBaseLine>()
            .Name("grid")
            .Columns(columns =>
            {
                columns.Bound(e => e.EPICId).Filterable(ftb => ftb.Multi(true).Search(true)).Title("EPIC Id").Width(120).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Locked(true);
                columns.Bound(e => e.EPICName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Name").Width(270).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" }).Locked(true);
                columns.Bound(e => e.ModuleName.ModuleName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Module").Width(240).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.EpicType.TypeName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Type").Width(125).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.ProjectLocation.LocationName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Location").EditorTemplateName("ClientProjectLocationEditor").Width(160).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.Estimation).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Filterable(false).Width(105).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.EpicWeight).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Filterable(false).Title("Weight").Width(105).Format("{0:0.0000}").HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.Team.TeamName).Filterable(ftb => ftb.Multi(true).Search(true)).Title("Team").EditorTemplateName("ClientTeamEditor").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.IsFirstSellableModule.FirstSellableModuleName).Width(200).Filterable(fil => fil.UI("firstSellableModuleFilter")).Title("Is First Sellable Module").EditorTemplateName("ClientFirstSellableModuleEditor").HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.DistributedUnmappedEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Filterable(false).Format("{0:0.00}").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.ActualEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Filterable(false).Format("{0:0.00}").Width(120).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                columns.Bound(e => e.TotalActualEffort).ClientFooterTemplate("Total: #= kendo.format('{0:0.00}', sum)#").Filterable(false).Format("{0:0.00}").Width(135).HtmlAttributes(new { @class = "row-style-default" }).HeaderHtmlAttributes(new { style = "text-align:center; height:auto; white-space:normal;" });
                if (Context.User.IsInRole("Project Manager") || Context.User.IsInRole("Program Manager") || Context.User.IsInRole("Admin")) { columns.Command(command => { command.Edit(); }).Width(125); }
            })
            .ToolBar(t => t.Excel())
            .Editable(editable => editable.Mode(GridEditMode.InLine))
            .Groupable()
            .Scrollable()
            .Sortable(sort => sort.SortMode(GridSortMode.MultipleColumn))
            .Filterable()
            .Excel(excel => excel.FileName("EpicBaseLine.xlsx").Filterable(true).ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
            .Resizable(resizable => resizable.Columns(true))
            .Reorderable(reorderable => reorderable.Columns(true))
            .HtmlAttributes(new { style = "background-color: Gainsboro" })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Aggregates(aggregates =>
                {
                    aggregates.Add(m => m.EpicWeight).Sum();
                    aggregates.Add(m => m.Estimation).Sum();
                    aggregates.Add(m => m.DistributedUnmappedEffort).Sum();
                    aggregates.Add(m => m.ActualEffort).Sum();
                    aggregates.Add(m => m.TotalActualEffort).Sum();
                })
                .Events(events => events.Error("error_handler"))
                .Model(model =>
                {
                    model.Id(e => e.EPICId);
                    model.Field(e => e.EPICId).Editable(false);
                    if (!(User.IsInRole("Admin") || User.IsInRole("Project Manager") || User.IsInRole("Program Manager")))
                    {
                        model.Field(e => e.EPICName).Editable(false);
                    }
                    model.Field(e => e.ModuleName.ModuleName).Editable(false);
                    model.Field(e => e.EpicType.TypeName).Editable(false);
                    model.Field(e => e.Estimation).Editable(false);
                    model.Field(e => e.EpicWeight).Editable(false);
                    model.Field(e => e.DistributedUnmappedEffort).Editable(false);
                    model.Field(e => e.ActualEffort).Editable(false);
                    model.Field(e => e.TotalActualEffort).Editable(false);
                    model.Field(e => e.EpicType).DefaultValue(ViewData["defaultType"] as Epic_Project.Models.EpicTypeViewModel);
                    model.Field(e => e.ModuleName).DefaultValue(ViewData["defaultModule"] as Epic_Project.Models.Module);
                    model.Field(e => e.IsMurabaha).DefaultValue(ViewData["defaultMurabaha"] as Epic_Project.Models.MurabahaViewModel);
                    model.Field(e => e.IsFirstSellableModule).DefaultValue(ViewData["defaultFirstSellableModule"] as Epic_Project.Models.IsFirstSellableModuleViewModel);
                    model.Field(e => e.ProjectLocation).DefaultValue(ViewData["defaultLocation"] as Epic_Project.Models.ProjectLocationViewModel);
                    model.Field(e => e.Team).DefaultValue(ViewData["defaultTeam"] as Epic_Project.Models.Team);
                })
                .Create(update => update.Action("EditingInLine_Create", "Grid", new { User.Identity.Name }))
                .Read(read => read.Action("EditingInLine_Read", "Grid"))
                .Update(update => update.Action("EditingInLine_Update", "Grid", new { User.Identity.Name }))
                .Destroy(update => update.Action("EditingInLine_Destroy", "Grid", new { User.Identity.Name }))
            )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function locationFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenu_Locations")"
                }
            },
            optionLabel: "Select Location"
        });
    }
    function firstSellableModuleFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenu_IsFirstSellableModule")"
                }
            }
        });
    }
    function typeFilter(element) {
        element.kendoDropDownList({
            dataSource: {
                transport: {
                    read: "@Url.Action("FilterMenu_Type")"
                }
            },
            optionLabel: "Select Type"
        });
    }

    function resizeGrid() {
        //Define Elements Needed
        var header = $("#header-content");
        var grid = $("#grid");

        var minimumAcceptableGridHeight = 300;

        var windowHeight = $(window).innerHeight();
        //var headerHeight = $(window).headerHeight();
        var contentArea = grid.find(".k-grid-content");

        var calculatedHeight = windowHeight - 185 - 10 - 70; // - headerHeight;       header is empty but this calculation makes grid small
        calculatedHeight += 75;         // create new record butonu eklenirse burayı commentle
        var finalHeight = (calculatedHeight < minimumAcceptableGridHeight ? minimumAcceptableGridHeight : calculatedHeight);

        contentArea.height(finalHeight);
    }
    $(window).resize(function () {
        resizeGrid();
    });
    $(window).ready(function () {
        resizeGrid();
    });
</script>
<style>
    .k-grid tbody tr {
        height: 40px;
    }

    .row-style-default {
        text-align: center;
        height: auto;
        white-space: normal;
    }
</style>